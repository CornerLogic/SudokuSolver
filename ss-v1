import numpy as np

# puzzle = np.matrix([
# 	[5,3,0,0,7,0,0,0,0],
#     [6,0,0,1,9,5,0,0,0],
#     [0,9,8,0,0,0,0,6,0],
#     [8,0,0,0,6,0,0,0,3],
#     [4,0,0,8,0,3,0,0,1],
#     [7,0,0,0,2,0,0,0,6],
#     [0,6,0,0,0,0,2,8,0],
#     [0,0,0,4,1,9,0,0,5],
#     [0,0,0,0,8,0,0,7,9]
#     ])

# Harder puzzle with more 0s
puzzle = np.matrix([
	[5,3,0,0,7,0,0,0,0],
    [6,0,0,1,0,5,0,0,0],
    [0,9,8,0,0,0,0,6,0],
    [8,0,0,0,6,0,0,0,3],
    [4,0,0,8,0,3,0,0,1],
    [7,0,0,0,2,0,0,0,6],
    [0,6,0,0,0,0,2,0,0],
    [0,0,0,4,1,9,0,0,5],
    [0,0,0,0,8,0,0,7,9]
    ])

recursion = 0
solution = 0

def is_possible(row_ref, col_ref, number):
	"""Return True if "number" is able to go in cell with given row_ref, col_ref"""

	#Is number already in row?
	if number in puzzle[row_ref]:
		return False
	#Is number already in column?
	if number in puzzle[:,col_ref]:
		return False
	#Is number already in house?
		#Determines if row, col are part of 1st, 2nd, or 3rd house in row/col
	r = (row_ref // 3) * 3
	c = (col_ref // 3) * 3
	for x in range(3):
		for y in range(3):
			#Checks if number is already in house
			if puzzle[r+x, c+y] == number:
				return False
	#If number not already in row, col, or house -> return True
	else:
		return True

def solve(sudoku):
	global recursion
	global solution
	for x in range(9):
		for y in range(9):
			if sudoku[x, y] == 0:
				recursion += 1
				for n in range(1, 10):
					if is_possible(x, y, n):
						sudoku[x, y] = n
						solve(sudoku)
						sudoku[x, y] = 0
				return
	solution += 1
	print(f"\n  ----Solution {solution}----")
	print(sudoku)
	print(f"Solved in {recursion} recursions")
	recursion = 0

	input("\nNext solution?")

	
solve(puzzle)
